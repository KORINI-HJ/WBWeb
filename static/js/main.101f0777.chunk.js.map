{"version":3,"sources":["Fortune/unicorn.svg","TextAddition.jsx","Fortune/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","makeStyles","button","marginLeft","Fortune","onClick","fortuneRef","React","useRef","src","UnicornImage","alt","className","cookie","current","classList","contains","add","setTimeout","remove","ref","useStyles","root","display","justifyContent","alignItems","flexDirection","minHeight","Bubble","children","App","classes","useState","messages","selectedMessage","setSelectedMessage","randomIndex","Math","floor","random","length","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,qC,uNCIzBC,YAAW,CAC3BC,OAAQ,CACNC,WAAY,U,gBCuBDC,G,MAzBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACXC,EAAaC,IAAMC,SAazB,OACE,yBACEC,IAAKC,IACLC,IAAI,qBACJC,UAAU,UACVP,QAhBgB,WAClB,IAAMQ,EAASP,EAAWQ,QACrBD,EAAOE,UAAUC,SAAS,sBAC7BX,IACAQ,EAAOE,UAAUE,IAAI,oBACrBC,YAAW,WACTL,EAAOE,UAAUI,OAAO,sBACvB,OAUHC,IAAKd,MCjBLe,G,MAAYpB,YAAW,CAC3BqB,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACfC,UAAW,YAKTC,EAAS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OAAO,yBAAKjB,UAAU,UAAUiB,IAgCnBC,EA7BH,WACV,IAAMC,EAAUV,IADA,EAGgBW,mBAAS,CAAC,8CAAY,kGAAwB,oFAAoB,gFAAqB,yCAAY,qEAAoB,6FAAwB,4BAAS,+EAAoB,mEAAkB,sFAAsB,gEAHpO,mBAGTC,EAHS,aAI8BD,mBAAS,4DAJvC,mBAITE,EAJS,KAIQC,EAJR,KAmBhB,OACE,yBAAKvB,UAAWmB,EAAQT,MAEtB,kBAAC,EAAD,CAASjB,QAZO,WAClB,IAAM+B,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,EAASO,QACxDC,QAAQC,IAAIT,EAASG,IACrBD,EAAmBF,EAASG,IAC5BlB,YAAW,WACTiB,EAAmB,6DAClB,QAOD,kBAAC,EAAD,KAASD,GACX,gCClCgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.101f0777.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unicorn.017dbdc8.svg\";","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  button: {\n    marginLeft: \"25px\",\n  },\n});\n\nconst TextAddition = (props) => {\n  const classes = useStyles();\n  const [text, setText] = useState(\"\");\n  const messageList = props.messages.map((e) => <li>{e}</li>);\n\n  const handleClick = () => {\n    props.onMessageAdd(text);\n    // setMessages([...messages, text]);\n  };\n\n  const handleChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <div>\n      <ul>{messageList}</ul>\n      <input onChange={handleChange} />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        onClick={handleClick}\n      >\n        추가하기\n      </Button>\n    </div>\n  );\n};\n\nexport default TextAddition;\n","import React from \"react\";\nimport UnicornImage from \"./unicorn.svg\";\nimport \"./unicorn.css\";\n\nconst Fortune = ({ onClick }) => {\n  const fortuneRef = React.useRef(); //import 안 해서 React 붙임\n\n  const handleClick = () => {\n    const cookie = fortuneRef.current;\n    if (!cookie.classList.contains(\"fortune--jumping\")) {\n      onClick();\n      cookie.classList.add(\"fortune--jumping\");\n      setTimeout(() => {\n        cookie.classList.remove(\"fortune--jumping\");\n      }, 4000);\n    }\n  };\n\n  return (\n    <img\n      src={UnicornImage}\n      alt=\"오도원\"\n      className=\"fortune\"\n      onClick={handleClick}\n      ref={fortuneRef} //이러면 이미지를 레프로 쓸 수 있다\n    />\n  );\n};\n\nexport default Fortune;\n","import React, { useState } from \"react\";\nimport TextAddition from \"./TextAddition\";\nimport Fortune from \"./Fortune\";\nimport Input from '@material-ui/core/Input';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\", //js이기 때문에 문자열로 처리, css는 없어도 됨\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n\n  }\n})\n\nconst Bubble = ({children}) => {\n  return <div className=\"bubble\">{children}</div>\n}\n\nconst App = () => {\n  const classes = useStyles()\n\n  const [messages, setMessages] = useState([\"도원님 사랑해요\", \"오도원은 오늘 행운이 가득한 날이다!\", \"오도가 항상 행복했으면 좋겠어\", \"오도 우리 사르르 먹으러 갈래?\", \"오도 보고 싶당\", \"너 지금 내 생각 하고 있지?\", \"앞으로 영상 통화는 절대 안 할 거야\", \"나 귀엽징\", \"오늘은 현지랑 데이트하는 날!\", \"현지랑 보드게임 할 사람~\", \"오늘 밤에 맛있는 거 먹으러 가자\", \"해운대 갈까? 서면 갈까?\"]);\n  const [selectedMessage, setSelectedMessage] = useState(\"유니콘을 눌러주세요\");\n\n  const handleMessageAdd = (text) => {\n    setMessages([...messages, text]);\n  }\n\n  const handleClick = () => {\n    const randomIndex = Math.floor(Math.random() * messages.length)\n    console.log(messages[randomIndex])\n    setSelectedMessage(messages[randomIndex])\n    setTimeout(() => {\n      setSelectedMessage(\"유니콘을 눌러주세요\")\n    }, 8000);  \n  }\n\n  return ( \n    <div className={classes.root}>\n      {/* <TextAddition messages={messages} onMessageAdd={handleMessageAdd} /> */}\n      <Fortune onClick={handleClick} />\n      <Bubble>{selectedMessage}</Bubble>\n    <div></div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}